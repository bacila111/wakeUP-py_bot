import telebot
import datetime
import openpyxl
from datetime import datetime, timedelta
from telebot import types

bot = telebot.TeleBot('8239476473:AAGXfOQzuQlAqd3nMruyAQhK-ingXE3yDoo')

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
user_states = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ Excel
def get_schedule(day, parity):
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª Excel
        wb = openpyxl.load_workbook('schedule.xlsx')
        sheet = wb.active

        schedule = []

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º (–Ω–∞—á–∏–Ω–∞—è —Å–æ 2-–π, —Ç–∞–∫ –∫–∞–∫ 1-—è - –∑–∞–≥–æ–ª–æ–≤–∫–∏)
        for row in sheet.iter_rows(min_row=2, values_only=True):
            # row[0] - –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, row[1] - —á–µ—Ç–Ω–æ—Å—Ç—å, row[2] - –Ω–æ–º–µ—Ä –ø–∞—Ä—ã
            if row[0] == day and row[1] == parity and row[2] is not None and row[2] != "":
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç—ã –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è
                time_str = row[5]  # –í—Ä–µ–º—è –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ F
                minutes_to_first_pair = convert_time_to_minutes(time_str)

                subject = {
                    'pair_number': row[2],
                    'name': row[3],
                    'type': row[4],
                    'time': row[5],
                    'location': row[6],
                    'minutes_to_first_pair': minutes_to_first_pair
                }
                schedule.append(subject)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –ø–∞—Ä—ã
        schedule.sort(key=lambda x: x['pair_number'])
        return schedule

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel: {e}")
        return []


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç—ã –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è
def convert_time_to_minutes(time_str):
    if not time_str:
        return 540  # 9:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –≤–∏–¥–∞ "14:20 -15:50" –∏–ª–∏ "09:00 - 10:30"
        start_time_str = time_str.split('-')[0].strip()
        hours, minutes = map(int, start_time_str.split(':'))
        return hours * 60 + minutes
    except:
        return 540  # 9:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥—ä–µ–º–∞
def calculate_wake_up_time(schedule, day_type):
    if not schedule:
        return "–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –ø–∞—Ä –Ω–µ—Ç! –ú–æ–∂–Ω–æ –ø–æ—Å–ø–∞—Ç—å –ø–æ–¥–æ–ª—å—à–µ üò¥"

    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É
    first_pair = min(schedule, key=lambda x: x['pair_number'])
    pair_number = first_pair['pair_number']
    pair_time_minutes = first_pair['minutes_to_first_pair']

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞ –¥–æ—Ä–æ–≥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ—Ä–ø—É—Å–∞
    location = first_pair.get('location', '')
    travel_time = 30  # –±–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–æ—Ä–æ–≥–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–ø—É—Å –ø–æ –ª–æ–∫–∞—Ü–∏–∏
    if '–ú–ü-1' in location:
        travel_time = 70
    elif '–í-78' in location:
        travel_time = 60
    elif '–°-20' in location:
        travel_time = 100

    # –õ–æ–≥–∏–∫–∞ –ø–æ–¥—ä–µ–º–∞
    if pair_number >= 3:  # 3 –ø–∞—Ä–∞ –∏ –≤—ã—à–µ
        preparation_time = 150  # 2.5 —á–∞—Å–∞ = 150 –º–∏–Ω—É—Ç
    else:
        preparation_time = 120  # 2 —á–∞—Å–∞ = 120 –º–∏–Ω—É—Ç

    # –û–±—â–µ–µ –≤—Ä–µ–º—è –¥–æ –≤—ã—Ö–æ–¥–∞
    total_minutes_before = preparation_time + travel_time

    # –í—Ä–µ–º—è –ø–æ–¥—ä–µ–º–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è)
    wake_up_minutes = pair_time_minutes - total_minutes_before

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    wake_up_hours = wake_up_minutes // 60
    wake_up_minutes = wake_up_minutes % 60

    wake_up_time = f"{wake_up_hours:02d}:{wake_up_minutes:02d}"

    result = f"‚è∞ –í–∞–º –Ω—É–∂–Ω–æ –≤—Å—Ç–∞—Ç—å –≤ {wake_up_time}\n"
    result += f"üìö –ü–µ—Ä–≤–∞—è –ø–∞—Ä–∞: {first_pair['time']} ({first_pair['name']})\n"
    result += f"üè´ –ö–æ—Ä–ø—É—Å: {location}\n"
    result += f"üöó –í—Ä–µ–º—è –Ω–∞ –¥–æ—Ä–æ–≥—É: {travel_time} –º–∏–Ω\n"
    result += f"üõèÔ∏è –í—Ä–µ–º—è –Ω–∞ —Å–±–æ—Ä—ã: {preparation_time // 60} —á {preparation_time % 60} –º–∏–Ω\n"

    return result


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç
def format_schedule(schedule, day_name, parity_name):
    if not schedule:
        return f"üìÖ {day_name} ({parity_name} –Ω–µ–¥–µ–ª—è)\n\n–ü–∞—Ä –Ω–µ—Ç! üéâ"

    result = f"üìÖ {day_name} ({parity_name} –Ω–µ–¥–µ–ª—è)\n\n"

    for subject in schedule:
        result += f"üïí {subject['time']}\n"
        result += f" {subject['name']}\n"
        result += f" {subject['location']}"
        result += f" {subject['type']}\n"
        result += "‚îÄ" * 30 + "\n"

    return result


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏
def get_russian_day_name(weekday):
    days = {
        0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        1: "–í—Ç–æ—Ä–Ω–∏–∫",
        2: "–°—Ä–µ–¥–∞",
        3: "–ß–µ—Ç–≤–µ—Ä–≥",
        4: "–ü—è—Ç–Ω–∏—Ü–∞",
        5: "–°—É–±–±–æ—Ç–∞",
        6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    return days.get(weekday, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ç–Ω–æ—Å—Ç–∏
def get_parity_name(parity):
    return "—á—ë—Ç–Ω–∞—è" if parity == 0 else "–Ω–µ—á—ë—Ç–Ω–∞—è"


@bot.message_handler(commands=['start'])
def main(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    btn1 = types.KeyboardButton('–í—Å—Ç–∞—Ç—å')
    markup.row(btn1)

    btn2 = types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    btn3 = types.KeyboardButton('coming soon...')
    markup.row(btn2, btn3)
    file = open('./tosya.jpg', 'rb')
    bot.send_photo(message.chat.id, file, reply_markup=markup, caption="<b>–ü—Ä–∏–≤–µ—Ç</b>, —è —Ç—É—Ç —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ",
                   parse_mode='HTML')


@bot.message_handler(content_types=['text'])
def text_button(message):
    if message.text == '–í—Å—Ç–∞—Ç—å':
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –í—Å—Ç–∞—Ç—å
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–°–µ–≥–æ–¥–Ω—è')
        btn2 = types.KeyboardButton('–ó–∞–≤—Ç—Ä–∞')
        markup.row(btn1, btn2)
        btn_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.row(btn_back)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[message.chat.id] = '–≤—Å—Ç–∞—Ç—å'
        bot.send_message(message.chat.id, "–ö–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç–∞—Ç—å?", reply_markup=markup)

    elif message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–°–µ–≥–æ–¥–Ω—è')
        btn2 = types.KeyboardButton('–ó–∞–≤—Ç—Ä–∞')
        markup.row(btn1, btn2)
        btn_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.row(btn_back)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[message.chat.id] = '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=markup)


    elif message.text == '–°–µ–≥–æ–¥–Ω—è':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑ –∫–∞–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–∏—à–ª–æ –Ω–∞–∂–∞—Ç–∏–µ
        current_state = user_states.get(message.chat.id)
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
        today_date = datetime.now()
        today_weekday = today_date.weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        parity = 1 - (today_date.isocalendar()[1] % 2)  # —á—ë—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏

        if current_state == '–≤—Å—Ç–∞—Ç—å':
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥—ä–µ–º–∞
            schedule = get_schedule(today_weekday, parity)
            wake_up_info = calculate_wake_up_time(schedule, "—Å–µ–≥–æ–¥–Ω—è")
            bot.send_message(message.chat.id, wake_up_info)


        elif current_state == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ Excel
            schedule = get_schedule(today_weekday, parity)
            day_name = get_russian_day_name(today_weekday)
            parity_name = get_parity_name(parity)
            formatted_schedule = format_schedule(schedule, day_name, parity_name)
            bot.send_message(message.chat.id, formatted_schedule)


    elif message.text == '–ó–∞–≤—Ç—Ä–∞':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑ –∫–∞–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–∏—à–ª–æ –Ω–∞–∂–∞—Ç–∏–µ
        current_state = user_states.get(message.chat.id)
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≤—Ç—Ä–∞
        tomorrow_date = datetime.now() + timedelta(days=1)
        tomorrow_weekday = tomorrow_date.weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        parity = 1 - (tomorrow_date.isocalendar()[1] % 2)  # —á—ë—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏

        if current_state == '–≤—Å—Ç–∞—Ç—å':
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥—ä–µ–º–∞
            schedule = get_schedule(tomorrow_weekday, parity)
            wake_up_info = calculate_wake_up_time(schedule, "–∑–∞–≤—Ç—Ä–∞")
            bot.send_message(message.chat.id, wake_up_info)


        elif current_state == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ Excel
            schedule = get_schedule(tomorrow_weekday, parity)
            day_name = get_russian_day_name(tomorrow_weekday)
            parity_name = get_parity_name(parity)
            formatted_schedule = format_schedule(schedule, day_name, parity_name)
            bot.send_message(message.chat.id, formatted_schedule)

    elif message.text == '–ù–∞–∑–∞–¥':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–í—Å—Ç–∞—Ç—å')
        markup.row(btn1)
        btn2 = types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        btn3 = types.KeyboardButton('coming soon...')
        markup.row(btn2, btn3)

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[message.chat.id] = '–≥–ª–∞–≤–Ω–æ–µ'
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

    elif message.text == 'coming soon...':
        bot.send_message(message.chat.id, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    else:
        bot.send_message(message.chat.id, '–Ω–µ –ø–æ–Ω—è–ª')


bot.polling(none_stop=True)